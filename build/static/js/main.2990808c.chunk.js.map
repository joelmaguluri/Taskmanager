{"version":3,"sources":["redux/constants.js","redux/authentication.js","store.js","components/navbar/Navbar.jsx","components/widgets/Typography.jsx","components/tasks/Pie.jsx","components/tasks/Cards.jsx","components/widgets/Input.jsx","components/widgets/Button.jsx","components/tasks/Modal.jsx","components/tasks/TaskTable.jsx","components/tasks/NoTasks.jsx","routes/Dashboard.jsx","components/login/LoginForm.jsx","components/firebaseconfig.js","app.js","index.js"],"names":["SETUSER","LOGOUT","UPDATETASKINFO","initialState","authenticated","user","UserReducer","state","action","type","payload","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","persistedState","serializedState","localStorage","getItem","JSON","parse","err","loadState","store","createStore","combineReducers","authentication","applyMiddleware","subscribe","stringify","setItem","saveState","getState","Header","styled","div","Navbar","logout","history","name","image","className","href","src","alt","width","style","display","float","cursor","onClick","push","CardTitle","h1","CardListItem","h4","UnorderedList","ul","PieChart","this","props","completedtasks","totaltasks","height","chartType","loader","data","options","legend","pieSliceText","pieStartAngle","rootProps","Component","TaskDisplay","span","TaskDisplayMini","CardWrapper","RecentTask","taskname","completed","console","log","overflow","Cards","recenttasks","getTasks","a","database","collection","get","taskboard","docs","map","doc","id","setState","componentDidMount","onSnapshot","snapshot","uid","position","InputWrapper","input","padding","Input","placeholder","onChange","Button","button","ModalWrapper","Modal","onSubmitHandler","show","closeModal","e","updateTaskName","time","createNewTask","role","borderRadius","boxShadow","borderBottom","aria-hidden","onSubmit","Wrapper","Task","deleteTask","datecreated","togglecheckboxState","useState","checked","updateState","htmlFor","class","preventDefault","TaskTable","displaymodal","tasks","searchtaskbyname","inputtaskname","target","value","searchresult","filter","task","replace","toLowerCase","includes","updateTaskInfo","date","Date","toDateString","getTime","add","set","merge","then","response","catch","newtaskname","updatedData","forEach","where","delete","update","taskid","connect","storeFirstTask","NoTasks","background","Dashboard","to","dispatch","FormWrapper","AuthenticateUser","setuser","Id","username","success","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firebase","initializeApp","createBrowserHistory","firestore","App","path","component","exact","Login","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2990808c.chunk.js","sourcesContent":["export const SETUSER='setuser';\r\nexport const LOGOUT='logout'\r\nexport const UPDATETASKINFO='updatetaskinfo'\r\nexport const RESETTASKINFO='resettaskinfo'","\r\nimport { LOGOUT, SETUSER, UPDATETASKINFO } from \"./constants\";\r\n\r\nconst initialState = {authenticated: false, user:null};\r\n\r\nconst UserReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SETUSER:// set the user data in store if authentication was successful\r\n        return {user:{...action.payload},authenticated:'true'};\r\n    case UPDATETASKINFO: // updating taskinfo i.e completed tasks and total tasks\r\n          return {...state,user:{...state.user,...action.payload}};\r\n    case LOGOUT: // remove user data from store\r\n        return {user:null,authenticated:false};\r\n    \r\n    default:\r\n      return {...state};\r\n  }\r\n};\r\n\r\nexport default UserReducer;","import {createStore, applyMiddleware, compose, combineReducers} from \"redux\";\r\nimport UserReducer from \"./redux/authentication\";\r\n\r\n\r\n// Create store with reducers and initial state\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst middleware = [];\r\n\r\n\r\nexport const loadState = () => {\r\n  try {\r\n    const serializedState = localStorage.getItem('state')\r\n    if (serializedState === null) {\r\n      return undefined\r\n    }\r\n    return JSON.parse(serializedState)\r\n  }\r\n  catch (err) {\r\n    return undefined\r\n  }\r\n}\r\n\r\nexport const saveState = (state) => {\r\n  try {\r\n    const serializedState = JSON.stringify(state)\r\n    localStorage.setItem('state', serializedState)\r\n  }\r\n  catch (err) {\r\n    // ignore\r\n  }\r\n}\r\n\r\nlet persistedState=loadState()\r\nconst store = createStore(\r\n  combineReducers({\r\n    authentication: UserReducer,\r\n  }),\r\n  persistedState,\r\n  composeEnhancers(applyMiddleware(...middleware))\r\n);\r\n\r\nstore.subscribe(() => {\r\n  saveState({\r\n    authentication: store.getState().authentication\r\n  })\r\n})\r\n\r\nexport default store;","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Header = styled.div`\r\n  background: #ffff;\r\n  box-shadow: rgba(30, 32, 75, 0.17) 0px 15px 10px -15px;\r\n  border-bottom: 1px solid #dee2e6;\r\n  min-height: 50px;\r\n`;\r\n\r\nexport default function Navbar({ user, logout, history }) {\r\n  const { name, image } = user;\r\n  return (\r\n    <Header className=\"p-4 px-md-4 mb-4\">\r\n      <div className=\"container \">\r\n        <div className=\"row  align-items-center\">\r\n          <div className=\"col-lg-4 col-md-4 col-sm-12 col-xs-12\">\r\n            <div className=\"logo-area\">\r\n              <a href=\"/\">\r\n                <img\r\n                  src={image}\r\n                  alt=\"user\"\r\n                  className=\"rounded-circle mr-3\"\r\n                  width={40}\r\n                />\r\n                <span className=\"text-dark\" style={{ display: \"inline\" }}>\r\n                  {name}\r\n                </span>\r\n              </a>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-lg-8 col-md-8 col-sm-12 col-xs-12\">\r\n            <div style={{ float: \"right\", cursor: \"pointer\" }}>\r\n              <span\r\n                className=\"text-dark\"\r\n                onClick={() => {\r\n                  logout();\r\n                  history.push(\"/\");\r\n                }}\r\n              >\r\n                Logout\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Header>\r\n  );\r\n}\r\n","import styled from \"styled-components\";\r\n\r\nexport const CardTitle = styled.h1`\r\n  font-family: \"Karla\", serif;\r\n  font-size: 30px;\r\n  font-weight: medium;\r\n  color: #6a7a8c;\r\n`;\r\n\r\nexport const CardListItem = styled.h4`\r\n  font-family: \"Karla\", serif;\r\n  font-size: 20px;\r\n  color: rgb(178, 178, 178);\r\n`;\r\nexport const UnorderedList = styled.ul`\r\n  list-style: none;\r\n  ul li::before {\r\n    content: \"\\2022\";\r\n    color: rgb(178, 178, 178);\r\n    font-weight: bold;\r\n    display: inline-block;\r\n    width: 1em;\r\n    margin-left: -1em;\r\n  }\r\n`;\r\n","import React, { Component } from \"react\";\r\nimport { Chart } from \"react-google-charts\";\r\n\r\nexport default class PieChart extends Component {\r\n  render() {\r\n    const { completedtasks, totaltasks } = this.props;\r\n    return (\r\n      <Chart\r\n        width={\"300px\"}\r\n        height={\"200px\"}\r\n        chartType=\"PieChart\"\r\n        loader={<div>Loading Chart</div>}\r\n        data={[\r\n          [\"Tasks\", \"Total\"],\r\n          [\"Completed\", completedtasks],\r\n          [\"Incomplete\", totaltasks - completedtasks],\r\n        ]}\r\n        options={{\r\n          legend: \"none\",\r\n          pieSliceText: \"label\",\r\n          pieStartAngle: 100,\r\n        }}\r\n        rootProps={{ \"data-testid\": \"4\" }}\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { database } from \"../../app\";\r\nimport { CardListItem, CardTitle, UnorderedList } from \"../widgets/Typography\";\r\nimport PieChart from \"./Pie\";\r\n\r\nconst TaskDisplay = styled.span`\r\n  font-size: 100px;\r\n  color: rgb(35 154 255);\r\n`;\r\nconst TaskDisplayMini = styled.h4`\r\n  display: inline;\r\n  font-size: 30px;\r\n  color: #b0b0b0;\r\n`;\r\n\r\nconst CardWrapper = styled.div`\r\n  padding: 20px;\r\n  background: rgb(255, 255, 255);\r\n  border-radius: 10px;\r\n  box-shadow: rgba(0, 0, 0, 0.1) 0px 3px 20px 0px;\r\n  min-height: 300px;\r\n  max-height: 300px;\r\n  min-width: 300px;\r\n  border: 0;\r\n  width: 100%;\r\n  overflow: hidden;\r\n`;\r\n\r\nconst RecentTask = ({ taskname, completed }) => {\r\n  console.log(\"taskname\", taskname, completed);\r\n  return (\r\n    <li>\r\n      <div className=\" text-left ml-3\" style={{ overflow: \"hidden\" }}>\r\n        <div>\r\n          <CardListItem>\r\n            {completed ? <del>{taskname}</del> : taskname}\r\n          </CardListItem>\r\n        </div>\r\n      </div>\r\n    </li>\r\n  );\r\n};\r\nexport default class Cards extends Component {\r\n  state = {\r\n    recenttasks: [],\r\n  };\r\n  getTasks = async () => {\r\n    let taskboard = await database.collection(\"taskboard\").get();\r\n    taskboard = taskboard.docs;\r\n    taskboard = taskboard.map((doc) => ({\r\n      data: doc.data(),\r\n      id: doc.id,\r\n    }));\r\n    this.setState({\r\n      recenttasks: taskboard,\r\n    });\r\n  };\r\n  componentDidMount = async () => {\r\n    this.getTasks();\r\n    /*attaching listener which responds to database \r\n    updation events and updates component state*/\r\n    database.collection(\"taskboard\").onSnapshot(async (snapshot) => {\r\n      this.getTasks();\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { completedtasks, totaltasks } = this.props;\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"row align-items-center\">\r\n          <div className=\"container-fluid mb-4\">\r\n            <div className=\"row justify-content-around\">\r\n              {/* Card 1 : Task Information (Completed , Total Tasks) */}\r\n              <div className=\"col-lg-3 col-md-6 col-sm-12 mb-4\">\r\n                <CardWrapper>\r\n                  <div className=\"card-body\">\r\n                    <div className=\"d-flex flex-row mb-3\">\r\n                      <div className=\"text-left\" style={{ width: \"100%\" }}>\r\n                        <CardTitle>New Tasks</CardTitle>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"d-flex flex-row\">\r\n                      <div className=\"text-left\" style={{ width: \"100%\" }}>\r\n                        <TaskDisplay>\r\n                          {completedtasks}\r\n                          <TaskDisplayMini>/{totaltasks}</TaskDisplayMini>\r\n                        </TaskDisplay>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </CardWrapper>\r\n              </div>\r\n\r\n              {/*card2 :   Recent Tasks*/}\r\n              <div className=\"col-lg-3 col-md-6 col-sm-12 mb-4\">\r\n                <CardWrapper>\r\n                  <div className=\"card-body\">\r\n                    <div className=\"d-flex flex-row mb-3\">\r\n                      <div className=\"text-left\" style={{ width: \"100%\" }}>\r\n                        <CardTitle>Recent Tasks</CardTitle>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"d-flex flex-row\">\r\n                      <div className=\"text-left\" style={{ width: \"100%\" }}>\r\n                        <UnorderedList>\r\n                          {this.state.recenttasks.map(({ data, id }) => {\r\n                            const { taskname, completed } = data;\r\n\r\n                            return (\r\n                              <RecentTask\r\n                                taskname={taskname}\r\n                                completed={completed}\r\n                                id={id}\r\n                              />\r\n                            );\r\n                          })}\r\n                        </UnorderedList>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </CardWrapper>\r\n              </div>\r\n\r\n              {/*card3 :   Visualization of Tasks (Pie Chart)*/}\r\n              <div className=\"col-lg-3 col-md-6 col-sm-12 mb-3\">\r\n                <CardWrapper>\r\n                  <div className=\"card-body\">\r\n                    <div className=\"d-flex flex-row justify-content-center\">\r\n                      <div>\r\n                        <PieChart\r\n                          uid={this.props.uid}\r\n                          completedtasks={completedtasks}\r\n                          totaltasks={totaltasks}\r\n                          style={{ position: \"relative\" }}\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </CardWrapper>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import styled from \"styled-components\";\r\n\r\nconst InputWrapper = styled.input`\r\n  border: none;\r\n  border-radius: 4px;\r\n  height: 50px;\r\n  background: #efefef;\r\n  display: block;\r\n  width: 100%;\r\n  padding: ${(props) => (props.padding ? `0.5rem 0rem` : `0.5rem 5rem`)};\r\n  font-size: 1rem;\r\n  font-weight: 400;\r\n  line-height: 1.5;\r\n  color: #495057;\r\n`;\r\nconst Input = (props) => {\r\n  const { name, placeholder, type, onChange } = props;\r\n  return (\r\n    <InputWrapper\r\n      type={type}\r\n      className=\"form-control mr-3 mb-3\"\r\n      placeholder={placeholder}\r\n      id={name}\r\n      onChange={onChange}\r\n      padding={props.padding}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Input;\r\n","import styled from \"styled-components\";\r\n\r\nconst Button = styled.button`\r\n  height: 54px;\r\n  padding-left: 30px;\r\n  padding-right: 30px;\r\n`;\r\nexport default Button;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Button from \"../widgets/Button\";\r\nimport Input from \"../widgets/Input\";\r\n\r\nlet ModalWrapper = styled.div`\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background: rgba(0, 0, 0, 0.6);\r\n  opacity: 1;\r\n  display: ${(props) => (props.display ? \"block\" : \"none\")};\r\n  transition-property: display;\r\n  transition:3s ease-in-out;\r\n  };\r\n  .modal-main {\r\n    position: fixed;\r\n    width: 80%;\r\n    height: auto;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n  }\r\n  \r\n`;\r\n\r\nconst Modal = (props) => {\r\n  const { type, show, closeModal } = props;\r\n  var onSubmitHandler;\r\n  if (type === \"edit\")\r\n    onSubmitHandler = (e) => {\r\n      props.updateTaskName(e, props.taskname, props.time);\r\n    };\r\n  else {\r\n    onSubmitHandler = (e) => {\r\n      props.createNewTask(e);\r\n    };\r\n  }\r\n  return (\r\n    <ModalWrapper display={show}>\r\n      <section className=\"modal-main\">\r\n        <div className=\"modal-dialog modal-dialog-centered \" role=\"document\">\r\n          <div\r\n            className=\"modal-content\"\r\n            style={{\r\n              borderRadius: \"10px\",\r\n              boxShadow: \"rgba(0, 0, 0, 0.1) 0px 3px 20px 0px\",\r\n              width: \"100%\",\r\n            }}\r\n          >\r\n            <div className=\"modal-header\" style={{ borderBottom: \"0px\" }}>\r\n              <h5 className=\"modal-title\">\r\n                {type === \"edit\" ? \"Update Task\" : \"New Task\"}\r\n              </h5>\r\n              <button type=\"button\" className=\"close\" onClick={closeModal}>\r\n                <span aria-hidden=\"true\">&times;</span>\r\n              </button>\r\n            </div>\r\n\r\n            <div className=\"modal-body\">\r\n              <div>\r\n                <div className=\"content\">\r\n                  <div className=\"container\">\r\n                    <div className=\"row justify-content-center\">\r\n                      <div className=\"col-md-6 contents\">\r\n                        <div className=\"row justify-content-center\">\r\n                          <div className=\"col-md-12\">\r\n                            <div className=\"form-block\">\r\n                              <form onSubmit={onSubmitHandler}>\r\n                                <Input\r\n                                  type=\"text\"\r\n                                  name=\"task\"\r\n                                  placeholder=\"taskname\"\r\n                                  padding={1}\r\n                                />\r\n\r\n                                <Button\r\n                                  type=\"submit\"\r\n                                  className=\"btn btn-block btn-primary mt-4\"\r\n                                >\r\n                                  {type === \"edit\" ? \"Update Task\" : \"New Task\"}\r\n                                </Button>\r\n                              </form>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                {/* <form className=\"login100-form\" onSubmit={onSubmitHandler}>\r\n                  <div className=\"form-group\">\r\n                    <div className=\"wrap-input100 validate-input mb-4\">\r\n                      <input\r\n                        className=\"input100\"\r\n                        type=\"text\"\r\n                        name=\"task\"\r\n                        placeholder=\"taskname\"\r\n                        autofocus\r\n                      />\r\n                    </div>\r\n\r\n                    <div className=\"container-login100-form-btn mt-20\">\r\n                      <button\r\n                        className=\"login100-form-btn btn btn-primary\"\r\n                        type=\"submit\"\r\n                      >\r\n                        {type === \"edit\" ? \"Update Task\" : \"New Task\"}\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                </form> */}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    </ModalWrapper>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n","import React, { Component, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\nimport { database } from \"../../app\";\r\nimport Input from \"../widgets/Input\";\r\nimport { CardTitle } from \"../widgets/Typography\";\r\nimport Modal from \"./Modal\";\r\n\r\nconst Wrapper = styled.div`\r\n  padding: 20px;\r\n  background: #fff;\r\n  border-radius: 10px;\r\n  box-shadow: 0 3px 20px 0px rgba(0, 0, 0, 0.1);\r\n  max-height: 400px;\r\n  overflow: scroll;\r\n  ::-webkit-scrollbar {\r\n    width: 5px;\r\n  }\r\n  /* Track */\r\n  ::-webkit-scrollbar-track {\r\n    -webkit-border-radius: 4px;\r\n    border-radius: 4px;\r\n  }\r\n\r\n  /* Handle */\r\n  ::-webkit-scrollbar-thumb {\r\n    -webkit-border-radius: 4px;\r\n    border-radius: 10px;\r\n    background: #c1dfff;\r\n  }\r\n`;\r\n\r\nconst Task = ({\r\n  taskname,\r\n  time,\r\n  completed,\r\n  uid,\r\n  deleteTask,\r\n  datecreated,\r\n  updateTaskName,\r\n  togglecheckboxState,\r\n}) => {\r\n  const [state, updateState] = useState({ show: false, checked: completed });\r\n  return (\r\n    <div className=\"todo-item all-todo-list p-3 border-bottom position-relative\">\r\n      <div className=\"inner-item d-flex align-items-start\">\r\n        <div className=\"w-100\">\r\n          {/* Checkbox */}\r\n          <div className=\"custom-control custom-checkbox d-flex align-items-start\">\r\n            <input\r\n              type=\"checkbox\"\r\n              className=\"custom-control-input\"\r\n              id={`checkbox-${time}`}\r\n              checked={state.checked}\r\n              onClick={() => {\r\n                togglecheckboxState(state.checked, taskname, time);\r\n                updateState((state) => ({\r\n                  checked: !state.checked,\r\n                }));\r\n              }}\r\n            />\r\n\r\n            <label\r\n              className=\"custom-control-label\"\r\n              htmlFor={`checkbox-${time}`}\r\n            />\r\n\r\n            <div>\r\n              <div className=\"content-todo\">\r\n                <h5 className=\"font-medium font-16 todo-header mb-0\">\r\n                  {state.checked ? <del>taskname</del> : taskname}\r\n                </h5>\r\n                <span className=\"todo-time font-12 text-muted\">\r\n                  {datecreated}\r\n                </span>\r\n              </div>\r\n            </div>\r\n            <div className=\"ml-auto\">\r\n              <div className=\"todo-actions\">\r\n                <div\r\n                  className=\"edit-todo todo-action mr-3\"\r\n                  style={{ display: \"inline\", cursor: \"pointer\" }}\r\n                  onClick={async () => {\r\n                    updateState((state) => ({\r\n                      show: !state.show,\r\n                      checked: state.checked,\r\n                    }));\r\n                  }}\r\n                >\r\n                  <i class=\"fas fa-edit\"></i>\r\n                </div>\r\n                <div\r\n                  class=\"delete-todo todo-action\"\r\n                  style={{ display: \"inline\", cursor: \"pointer\" }}\r\n                  onClick={(e) => {\r\n                    e.preventDefault();\r\n                    deleteTask(taskname, time, completed);\r\n                  }}\r\n                >\r\n                  <i class=\"fas fa-trash\"></i>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <Modal\r\n        type={\"edit\"}\r\n        show={state.show}\r\n        closeModal={() =>\r\n          updateState((state) => ({\r\n            show: !state.show,\r\n            checked: state.checked,\r\n          }))\r\n        }\r\n        uid={uid}\r\n        taskname={taskname}\r\n        updateTaskName={updateTaskName}\r\n        time={time}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nclass TaskTable extends Component {\r\n  state = {\r\n    displaymodal: false,\r\n    tasks: [],\r\n    taskboard: [],\r\n  };\r\n\r\n  componentDidMount = async () => {\r\n    console.log(\"called\");\r\n    //updating the component with tasks after retrieving from database\r\n    let taskboard = await database.collection(\"taskboard\").get();\r\n    taskboard = await taskboard.docs;\r\n    taskboard = taskboard.map((doc) => ({\r\n      data: doc.data(),\r\n      id: doc.id,\r\n    }));\r\n    await this.setState({\r\n      taskboard: taskboard,\r\n      tasks: taskboard,\r\n    });\r\n  };\r\n\r\n  searchtaskbyname = (e) => {\r\n    /*filters the tasks based on the search*/\r\n    let { taskboard } = this.state;\r\n    let inputtaskname = e.target.value;\r\n\r\n    //compare the tasks which matches input task and display them\r\n    let searchresult = taskboard.filter((task) =>\r\n      task.data[\"taskname\"]\r\n        .replace(/\\s/g, \"\")\r\n        .toLowerCase()\r\n        .includes(inputtaskname.toLowerCase())\r\n    );\r\n\r\n    this.setState({ tasks: searchresult });\r\n  };\r\n\r\n  createNewTask = async (e) => {\r\n    /* creates new task updates the component state \r\n    and store the new task in database*/\r\n    e.preventDefault();\r\n    const { uid, updateTaskInfo, completedtasks, totaltasks } = this.props;\r\n    let { taskboard } = this.state;\r\n    let date = new Date();\r\n    let taskname = e.target[\"task\"].value;\r\n\r\n    const data = {\r\n      taskname: taskname,\r\n      completed: false,\r\n      datecreated: date.toDateString(),\r\n      time: date.getTime(),\r\n    };\r\n\r\n    await database.collection(\"taskboard\").add(data);\r\n    taskboard = [...taskboard, { data: data, id: data.time }];\r\n\r\n    await this.setState({\r\n      taskboard: taskboard,\r\n      tasks: taskboard,\r\n    });\r\n\r\n    //Incrementing total tasks field of user document in database\r\n    database\r\n      .collection(\"users\")\r\n      .doc(uid)\r\n      .set(\r\n        {\r\n          completedtasks: completedtasks,\r\n          totaltasks: totaltasks + 1,\r\n        },\r\n        { merge: true }\r\n      )\r\n      .then((response) => console.log(response))\r\n      .catch((e) => console.log(e));\r\n\r\n    //setting the component state with new task\r\n\r\n    // dispatch method to modify store with new values\r\n    updateTaskInfo({\r\n      completedtasks: completedtasks,\r\n      totaltasks: totaltasks + 1,\r\n    });\r\n  };\r\n\r\n  updateTaskName = (e, taskname, time) => {\r\n    /*Updates state with new task name and also collection*/\r\n    e.preventDefault();\r\n    let newtaskname = e.target[\"task\"].value;\r\n    let { taskboard } = this.state;\r\n\r\n    //mapping through the tasks to find the relavent task and updating name\r\n    taskboard = taskboard.map((task) => {\r\n      const { data, id } = task;\r\n      if (data.taskname === taskname && data.time === time) {\r\n        data.taskname = newtaskname;\r\n        return {\r\n          data: data,\r\n          id: id,\r\n        };\r\n      }\r\n      return task;\r\n    });\r\n\r\n    this.setState({\r\n      taskboard: taskboard,\r\n    });\r\n  };\r\n\r\n  deleteTask = async (taskname, time, completed) => {\r\n    /* Deletes the task from the component state and also from the database*/\r\n\r\n    let { taskboard } = this.state;\r\n    const { uid, updateTaskInfo, completedtasks, totaltasks } = this.props;\r\n\r\n    //filtering tasks to find the relevant task and to delete it\r\n    let updatedData = [];\r\n    taskboard.forEach((task) => {\r\n      let data = task.data;\r\n      if (data.taskname === taskname && data.time === time);\r\n      else updatedData.push(task);\r\n    });\r\n\r\n    // checking for relevant task in the database and deleting it\r\n    database\r\n      .collection(\"taskboard\")\r\n      .where(\"taskname\", \"==\", taskname)\r\n      .where(\"time\", \"==\", time)\r\n      .get()\r\n      .then((data) => {\r\n        data = data.docs;\r\n        data.forEach(({ id }) => {\r\n          database\r\n            .collection(\"taskboard\")\r\n            .doc(id)\r\n            .delete();\r\n        });\r\n      });\r\n\r\n    //updating users collection\r\n    database\r\n      .collection(\"users\")\r\n      .doc(uid)\r\n      .update({\r\n        completedtasks: completed ? completedtasks - 1 : completedtasks,\r\n        totaltasks: totaltasks - 1,\r\n      });\r\n\r\n    updateTaskInfo({\r\n      completedtasks: completed ? completedtasks - 1 : completedtasks,\r\n      totaltasks: totaltasks - 1,\r\n    });\r\n    await this.setState({\r\n      taskboard: updatedData,\r\n      tasks: updatedData,\r\n    });\r\n  };\r\n\r\n  togglecheckboxState = (checked, taskname, time) => {\r\n    /* marks task as complete or incomplete*/\r\n\r\n    const { uid, updateTaskInfo, completedtasks } = this.props;\r\n    let { taskboard } = this.state;\r\n\r\n    // marking completed or incomplete based on the input\r\n    taskboard = taskboard.map((task) => {\r\n      const { data, id } = task;\r\n      if (data.taskname === taskname && data.time === time) {\r\n        data.completed = !checked;\r\n        return {\r\n          data: data,\r\n          id: id,\r\n        };\r\n      }\r\n      return task;\r\n    });\r\n\r\n    //updating the taskstate in the database\r\n    database\r\n      .collection(\"taskboard\")\r\n      .where(\"taskname\", \"==\", taskname)\r\n      .where(\"time\", \"==\", time)\r\n      .get()\r\n      .then(async (data) => {\r\n        data = data.docs;\r\n        data.forEach(({ id }) => {\r\n          database\r\n            .collection(\"taskboard\")\r\n            .doc(id)\r\n            .set({ completed: !checked }, { merge: true });\r\n        });\r\n      });\r\n\r\n    database\r\n      .collection(\"users\")\r\n      .doc(uid)\r\n      .set(\r\n        {\r\n          completedtasks: !checked ? completedtasks + 1 : completedtasks - 1,\r\n        },\r\n        { merge: true }\r\n      );\r\n\r\n    updateTaskInfo({\r\n      completedtasks: !checked ? completedtasks + 1 : completedtasks - 1,\r\n    });\r\n    this.setState({\r\n      taskboard: taskboard,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    console.log(this.state);\r\n    const { tasks, displaymodal } = this.state;\r\n    return (\r\n      <div className=\"limiter\">\r\n        <div className=\"container\">\r\n          <div className=\"card-container ml-4\">\r\n            <div className=\"container\">\r\n              <div className=\"d-flex flex-sm-column flex-md-row justify-content-md-between\">\r\n                <div className=\"text-left ml-3\">\r\n                  <CardTitle>Tasks</CardTitle>\r\n                </div>\r\n                <div className=\"d-flex flex-sm-column flex-md-row align-self-md-end\">\r\n                  <Input\r\n                    onChange={this.searchtaskbyname}\r\n                    type=\"search\"\r\n                    placeholder=\"Search by Task Name\"\r\n                  />\r\n                  <button\r\n                    type=\"submit\"\r\n                    className=\"btn btn-block btn-primary mb-3\"\r\n                    style={{ height: \"50px\" }}\r\n                    onClick={() =>\r\n                      this.setState({ displaymodal: !displaymodal })\r\n                    }\r\n                  >\r\n                    <i class=\"fa fa-plus mr-2\" />\r\n                    Add Task\r\n                  </button>\r\n                </div>\r\n              </div>\r\n              <div className=\"row d-flex\">\r\n                <div className=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\r\n                  <Wrapper>\r\n                    <div className=\"p-3\">\r\n                      {tasks.map(({ data, id }) => {\r\n                        const { taskname, datecreated, completed, time } = data;\r\n                        return (\r\n                          <Task\r\n                            taskname={taskname}\r\n                            datecreated={datecreated}\r\n                            taskid={id}\r\n                            completed={completed}\r\n                            time={time}\r\n                            updateTaskName={this.updateTaskName}\r\n                            deleteTask={this.deleteTask}\r\n                            togglecheckboxState={this.togglecheckboxState}\r\n                          />\r\n                        );\r\n                      })}\r\n                      <Modal\r\n                        show={displaymodal}\r\n                        type=\"new\"\r\n                        closeModal={() =>\r\n                          this.setState({ displaymodal: !displaymodal })\r\n                        }\r\n                        createNewTask={this.createNewTask}\r\n                      />\r\n                    </div>\r\n                  </Wrapper>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n  let { user } = state.authentication;\r\n  return {\r\n    completedtasks: user.completedtasks,\r\n    totaltasks: user.totaltasks,\r\n    uid: user.uid,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(TaskTable);\r\n","import React, { useState } from \"react\";\r\nimport { database } from \"../../app\";\r\nimport Button from \"../widgets/Button\";\r\nimport Modal from \"./Modal\";\r\n\r\nconst storeFirstTask = async (e, uid) => {\r\n  e.preventDefault();\r\n  let date = new Date();\r\n  let taskname = e.target[\"task\"].value;\r\n  const data = {\r\n    taskname: taskname,\r\n    completed: false,\r\n    datecreated: date.toDateString(),\r\n    time: date.getTime(),\r\n  };\r\n  await database.collection(\"taskboard\").add(data);\r\n  await database\r\n    .collection(\"users\")\r\n    .doc(uid)\r\n    .set(\r\n      {\r\n        completedtasks: 0,\r\n        totaltasks: 1,\r\n      },\r\n      { merge: true }\r\n    );\r\n};\r\nconst NoTasks = (props) => {\r\n  const [show, updateState] = useState(0);\r\n  return (\r\n    <div className=\"content\" style={{ padding: \" 10rem 0\" }}>\r\n      <div className=\"container\">\r\n        <div className=\"row justify-content-center\">\r\n          <div className=\"col-md-6 contents\">\r\n            <div\r\n              className=\"row justify-content-center\"\r\n              style={{\r\n                background: \"white\",\r\n                borderRadius: \"10px\",\r\n                boxShadow: \"rgba(0, 0, 0, 0.1) 0px 3px 20px 0px\",\r\n              }}\r\n            >\r\n              <div className=\"col-md-12 p-5 m-5\">\r\n                <div className=\"form-block\">\r\n                  <div className=\"mb-4 text-center\">\r\n                    <h3>\r\n                      <strong>You Have No Tasks</strong>\r\n                    </h3>\r\n                  </div>\r\n\r\n                  <Button\r\n                    type=\"submit\"\r\n                    className=\"btn btn-block btn-primary mt-4\"\r\n                    onClick={(e) => {\r\n                      updateState(!show);\r\n                    }}\r\n                  >\r\n                    New Task\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <Modal\r\n        type={\"new\"}\r\n        show={show}\r\n        closeModal={() => updateState(!show)}\r\n        createNewTask={(e) => {\r\n          storeFirstTask(e, props.uid, props.history);\r\n          props.updateTaskInfo({ completedtasks: 0, totaltasks: 1 });\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NoTasks;\r\n","import React, { Component } from \"react\";\r\nimport Navbar from \"../components/navbar/Navbar\";\r\nimport Cards from \"../components/tasks/Cards\";\r\nimport { connect } from \"react-redux\";\r\nimport { LOGOUT, UPDATETASKINFO } from \"../redux/constants\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport TaskTable from \"../components/tasks/TaskTable\";\r\nimport NoTasks from \"../components/tasks/NoTasks\";\r\n\r\nclass Dashboard extends Component {\r\n  render() {\r\n    const { user, authenticated, logout, history, updateTaskInfo } = this.props;\r\n    if (authenticated)\r\n      return (\r\n        <div>\r\n          <Navbar user={user} logout={logout} history={history} />\r\n          {user.totaltasks ? (\r\n            <>\r\n              {/* component with three cards 1.totaltask and completed 2. recenttasks 3.Visualization of tasks */}\r\n              <Cards\r\n                completedtasks={user.completedtasks}\r\n                totaltasks={user.totaltasks}\r\n              />\r\n              {/*component consisting of all the list of tasks */}\r\n              <TaskTable\r\n                uid={user.uid}\r\n                completedtasks={user.completedtasks}\r\n                totaltasks={user.totaltasks}\r\n                updateTaskInfo={updateTaskInfo}\r\n              />\r\n            </>\r\n          ) : (\r\n            <NoTasks //component to be displayed when user has no tasks\r\n              uid={user.uid}\r\n              history={history}\r\n              updateTaskInfo={updateTaskInfo}\r\n            />\r\n          )}\r\n        </div>\r\n      );\r\n    else {\r\n      return <Redirect to=\"/\" />;\r\n    }\r\n  }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n  let { user, authenticated } = state.authentication;\r\n  return { user, authenticated };\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    logout: async () => {\r\n      await dispatch({ type: LOGOUT }); // removes all the user info from store\r\n    },\r\n    updateTaskInfo: (payload) => {\r\n      dispatch({ type: UPDATETASKINFO, payload: payload });\r\n    },\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Dashboard);\r\n","import React from \"react\";\r\nimport { SETUSER } from \"../../redux/constants\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport Input from \"../widgets/Input\";\r\nimport Button from \"../widgets/Button\";\r\nimport styled from \"styled-components\";\r\nimport { database } from \"../../app\";\r\n\r\nconst Wrapper = styled.div`\r\n  padding: 8rem 0;\r\n`;\r\nconst FormWrapper = styled.div`\r\n  background: white;\r\n  border-radius: 10px;\r\n  box-shadow: rgba(0, 0, 0, 0.1) 0px 3px 20px 0px;\r\n`;\r\n\r\nconst AuthenticateUser = async (setuser, e, history) => {\r\n  e.preventDefault();\r\n  let Id = e.target[\"Id\"].value;\r\n  let username = e.target[\"name\"].value;\r\n  let response = await database\r\n    .collection(\"users\")\r\n    .where(\"Id\", \"==\", Id)\r\n    .where(\"name\", \"==\", username)\r\n    .get();\r\n  console.log(response);\r\n  await response.docs.forEach((doc) => {\r\n    setuser({ ...doc.data(), uid: doc.id });\r\n  });\r\n\r\n  if (response.success) {\r\n    setuser(response.user);\r\n    history.push(\"/dashboard\");\r\n  }\r\n};\r\n\r\nconst LoginForm = ({ setuser, history, authenticated }) => {\r\n  return authenticated ? (\r\n    <Redirect to=\"/dashboard\" /> // if user is authenticated redirecting him to /dashboard\r\n  ) : (\r\n    // displaying loginform if not authenticated\r\n    <Wrapper className=\"content\">\r\n      <div className=\"container\">\r\n        <div className=\"row justify-content-center\">\r\n          <div className=\"col-md-6 contents\">\r\n            <FormWrapper className=\"row justify-content-center\">\r\n              <div className=\"col-md-12 p-5 m-5\">\r\n                <div className=\"form-block\">\r\n                  <div className=\"mb-4\">\r\n                    <h3>\r\n                      <strong>Login</strong>\r\n                    </h3>\r\n                  </div>\r\n                  <form\r\n                    onSubmit={(e) => {\r\n                      AuthenticateUser(setuser, e, history);\r\n                    }}\r\n                  >\r\n                    <Input type=\"text\" name=\"Id\" placeholder=\"Id\" />\r\n                    <Input type=\"password\" name=\"name\" placeholder=\"name\" />\r\n\r\n                    <Button\r\n                      type=\"submit\"\r\n                      className=\"btn btn-block btn-primary mt-4\"\r\n                    >\r\n                      Log In\r\n                    </Button>\r\n                  </form>\r\n                </div>\r\n              </div>\r\n            </FormWrapper>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    authenticated: state.authentication.authenticated,\r\n  };\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    setuser: (payload) => dispatch({ type: SETUSER, payload: payload }),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginForm);\r\n","var firebaseConfig = {\r\n  apiKey: \"AIzaSyAkJf3M9gNx7qrD8mWH6vrIdEzFP0Jd9Ks\",\r\n  authDomain: \"tdcx-dashboard-28b8f.firebaseapp.com\",\r\n  projectId: \"tdcx-dashboard-28b8f\",\r\n  storageBucket: \"tdcx-dashboard-28b8f.appspot.com\",\r\n  messagingSenderId: \"890976467873\",\r\n  appId: \"1:890976467873:web:e51706c7df4e84e2b6e9e0\",\r\n  measurementId: \"G-1FCSBD91XS\"\r\n};\r\n\r\n  export default firebaseConfig;","import React from \"react\";\r\nimport {createBrowserHistory} from \"history\";\r\nimport {Route, Router} from \"react-router-dom\";\r\nimport Dashboard from \"./routes/Dashboard\";\r\nimport Login from \"./components/login/LoginForm\";\r\nimport firebase from 'firebase'\r\nimport firebaseConfig from './components/firebaseconfig';\r\n\r\n\r\n// initializing database with config file\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nconst history = createBrowserHistory();\r\n\r\nconst App = () => {\r\n  return(\r\n    <Router history={history}>\r\n    <Route path='/dashboard' component={Dashboard}/>\r\n    <Route exact path='/' component={Login}/>\r\n    </Router>\r\n  );\r\n}\r\n\r\n//initialized database object for updating collections and documents\r\nexport const database = firebase.firestore();\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from \"react-redux\";\nimport store from './store'\nimport App from './app';\n\n\nReactDOM.render(\n  <Provider store={store}>\n        <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}